name: üöÄ Deploy Payments Service to AWS

on:
  push:
    paths:
      - 'backend/Payments/**'
    branches:
      - main
      - QA
      - bd_microservices

jobs:
  build-and-push:
    name: üì¶ Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: üõ†Ô∏è Checkout repository
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: üì¶ Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/payments-service:latest \
            --build-arg PORT=${{ secrets.PAYMENTS_PORT }} \
            -f backend/Payments/Dockerfile \
            backend/Payments

          docker push ${{ secrets.DOCKER_USERNAME }}/payments-service:latest

  deploy:
    name: üöÄ Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: üöÄ Connect to EC2 and Deploy Payments Service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_PAYMENTS }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "üîç Checking if Docker is installed..."
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo usermod -aG docker $USER
            fi

            echo "üõë Stopping and removing previous container..."
            sudo docker stop payments-service || true
            sudo docker rm payments-service || true

            echo "üßπ Removing old Docker images..."
            sudo docker image prune -af

            echo "üì• Pulling the latest Docker image..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/payments-service:latest

            echo "üîç Verifying database connection before running the container..."
            if ! nc -zv ${{ secrets.DB_HOST }} ${{ secrets.DB_PORT }}; then
              echo "‚ùå Database connection failed. Deployment aborted."
              exit 1
            fi

            echo "üîç Verifying environment variables:"
            echo "PORT=${{ secrets.PAYMENTS_PORT }}"
            echo "DB_HOST=${{ secrets.DB_HOST }}"
            echo "DB_PORT=${{ secrets.DB_PORT }}"
            echo "DB_USER=${{ secrets.DB_USER }}"
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
            echo "DB_DATABASE=${{ secrets.DB_DATABASE }}"

            echo "üöÄ Running the new container..."
            sudo docker run -d \
              --name payments-service \
              -p ${{ secrets.PAYMENTS_PORT }}:${{ secrets.PAYMENTS_PORT }} \
              -e PORT=${{ secrets.PAYMENTS_PORT }} \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_DATABASE=${{ secrets.DB_DATABASE }} \
              ${{ secrets.DOCKER_USERNAME }}/payments-service:latest

            echo "üîç Verifying deployment..."
            if [ "$(sudo docker ps -q -f name=payments-service)" ]; then
              echo "‚úÖ Deployment successful: Payments Service is running."
            else
              echo "‚ùå Deployment failed: Checking logs..."
              sudo docker logs payments-service > deployment_logs.txt
              cat deployment_logs.txt
              echo "‚ö†Ô∏è Checking Docker container status..."
              sudo docker ps -a
              exit 1
            fi
