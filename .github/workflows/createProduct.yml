name: Build, Push, and Deploy Create Product

on:
  push:
    branches: ["bd_microservices"]
    paths:
      - "backend/Products/createProduct/**"

  pull_request:
    branches:
      - "QA"
      - "main"
    paths:
      - "backend/Products/createProduct/**"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3

      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üõ†Ô∏è Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/create-product:latest \
            --file backend/Products/createProduct/Dockerfile \
            --build-arg BD_USER=${{ secrets.BD_USER }} \
            --build-arg BD_HOST=${{ secrets.BD_HOST }} \
            --build-arg BD_DATABASE=${{ secrets.BD_DATABASE }} \
            --build-arg BD_PASSWORD=${{ secrets.BD_PASSWORD }} \
            --build-arg BD_PORT=${{ secrets.BD_PORT }} \
            backend/Products/createProduct/

          docker push ${{ secrets.DOCKER_USERNAME }}/create-product:latest

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: üöÄ Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST_CREATE_PRODUCT }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # 1) Actualizar el sistema e instalar Docker si es necesario
            sudo yum update -y
            if ! command -v docker &> /dev/null; then
              echo "Docker no encontrado, instalando..."
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # 2) Detener y eliminar contenedor previo
            sudo docker stop create-product-container || true
            sudo docker rm create-product-container || true

            # 3) Descargar la nueva imagen desde Docker Hub
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/create-product:latest

            # 4) Ejecutar el contenedor con variables de entorno
            sudo docker run -d \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_DATABASE=${{ secrets.DB_DATABASE }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -p 3006:3006 \
              --name create-product-container ${{ secrets.DOCKER_USERNAME }}/create-product:latest

            # 5) Limpiar im√°genes antiguas
            sudo docker image prune -f
