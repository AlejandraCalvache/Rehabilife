name: üöÄ Deploy Create Inventory Service to AWS (MySQL)

on:
  push:
    paths:
      - 'Backend/Inventories/create-inventories/**'
    branches:
      - main
      - qa
      - bd_microservices

jobs:
  build-and-push:
    name: üèóÔ∏è Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # üì• Checkout del c√≥digo fuente
      - name: üõ†Ô∏è Checkout repository
        uses: actions/checkout@v4

      # üîß Configurar Docker Buildx
      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # üîê Iniciar sesi√≥n en Docker Hub
      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # üì¶ Construir y subir la imagen de Docker
      - name: üì¶ Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/inventory-create:latest \
            --build-arg PORT=${{ secrets.SERVER_PORT_CREATE_INVENTORY }} \
            -f Backend/Inventories/create-inventories/Dockerfile \
            Backend/Inventories/create-inventories

          docker push ${{ secrets.DOCKER_USERNAME }}/inventory-create:latest

  deploy:
    name: üöÄ Deploy to AWS EC2
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # üì° Conectar a AWS EC2 y desplegar el servicio
      - name: Connect to AWS EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_CREATE_INVENTORY }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "üîß Updating system and installing Docker if necessary"
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker

            echo "üõë Stopping and removing existing container"
            sudo docker stop inventory-create || true
            sudo docker rm inventory-create || true

            echo "üóëÔ∏è Cleaning unused Docker images"
            sudo docker system prune -f

            echo "üê≥ Pulling latest Docker image"
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/inventory-create:latest

            # ‚úÖ Instalar netcat (nc) antes de verificar la conexi√≥n a MySQL
            if ! command -v nc &> /dev/null; then
              echo "üì¶ Installing netcat (nc)..."
              sudo yum install -y nc
            fi

            echo "üîç Verifying database connection before running the container..."
            if ! nc -zv ${{ secrets.MYSQL_HOST }} 3306; then
              echo "‚ùå Database connection failed. Deployment aborted."
              exit 1
            fi

            echo "üîç Verifying environment variables:"
            echo "PORT=${{ secrets.SERVER_PORT_CREATE_INVENTORY }}"
            echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}"
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}"
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}"
            echo "MYSQL_DB=${{ secrets.MYSQL_DB }}"
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}"

            echo "üöÄ Running the new container..."
            sudo docker run -d \
              --name inventory-create \
              -p ${{ secrets.SERVER_PORT_CREATE_INVENTORY }}:${{ secrets.SERVER_PORT_CREATE_INVENTORY }} \
              -e PORT=${{ secrets.SERVER_PORT_CREATE_INVENTORY }} \
              -e MYSQL_HOST=${{ secrets.MYSQL_HOST }} \
              -e MYSQL_USER=${{ secrets.MYSQL_USER }} \
              -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              -e MYSQL_DB=${{ secrets.MYSQL_DB }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              ${{ secrets.DOCKER_USERNAME }}/inventory-create:latest

            echo "üîç Verifying deployment..."
            if [ "$(sudo docker ps -q -f name=inventory-create)" ]; then
              echo "‚úÖ Deployment successful: Create Inventory Service is running."
            else
              echo "‚ùå Deployment failed: Checking logs..."
              sudo docker logs inventory-create > deployment_logs.txt
              cat deployment_logs.txt
              echo "‚ö†Ô∏è Checking Docker container status..."
              sudo docker ps -a
              exit 1
            fi
